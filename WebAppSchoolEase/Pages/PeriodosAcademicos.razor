@page "/periodoacademico"
@using WebAppSchoolEase.Models;
@using WebAppSchoolEase.Services;
@inject ILogger<PeriodosAcademicos> Logger;
@inject IPeriodoAcademicoService periodoAcademicoService;
@inject IJSRuntime JSRumtime;
<PageTitle>Periodos Academicos</PageTitle>


@*
    formulario para crear periodos academicos
*@
<div>
    <h3>Crear Periodo Academico</h3>
    <EditForm Model="@periodoAcademico" OnSubmit="@Save">
        <div class="row">
            <div class="col-8 form-group">
                <label for="nombre" class="col-form-label">Nombre</label>
                <InputText id="nombre" class="form-control" @bind-Value="periodoAcademico.Nombre" required/>
                <label for="fechaIncio" class="col-form-label">Fecha de Inicio</label>
                <InputDate id="fechaIncio" class="form-control" @bind-Value="periodoAcademico.FechaInicio" required />
                <label for="fechaFin" class="col-form-label">Fecha de Finalizaci&oacuten</label>
                <InputDate id="fechaFin" class="form-control" @bind-Value="periodoAcademico.FechaFin" required />
                <label for="tipoPeriodo" class="col-form-label">Tipo de Periodo</label>
                <InputSelect id="tipoPeriodo" class="form-control" @bind-Value="periodoAcademico.TipoPeriodo">
                    <option value="0">Calendario A</option>
                    <option value="1">Calendario B</option>
                </InputSelect>          
            </div>
        </div>
        <hr />
        <button class="btn btn-primary" type="submit" >Guardar</button>
</EditForm>
    <hr />

</div>
@code
{
    private PeriodoAcademico periodoAcademico = new();
   


    private async Task Save()
    {
        await periodoAcademicoService.Add(periodoAcademico);
        StateHasChanged();
    }
   
}
@*
tabla para mostrar periodos academicos
*@
@if (periodosAcademicos?.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th>Fecha Inicio</th>
                <th>Fecha Fin</th>
                <th>Estado</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var periodoAcademico in periodosAcademicos)
            {
               
                <tr>
                    <td>@periodoAcademico.IdPeriodoAcademico</td>
                    <td>@periodoAcademico.Nombre</td>
                    <td>@periodoAcademico.FechaInicio</td>
                    <td>@periodoAcademico.FechaFin</td>
                    @if (periodoAcademico.TipoPeriodo.Equals (0))
                        {
                            <td>Calendario A</td>
                        }
                        else
                        {
                            <td>Calendario B</td>
                        }
    
                    <td>
                        <button class="btn btn-primary" @onclick="() => ShowEditForm(periodoAcademico)">Editar</button>

                        <button class="btn btn-danger" @onclick="() => Delete(periodoAcademico.IdPeriodoAcademico)">Eliminar</button>
                    </td>
                </tr>
            }

          
        </tbody>
    </table>
     <EditForm Model="@editPeriodo" OnValidSubmit="@SaveEditForm" OnReset="@CloseEditForm">
         <ValidationSummary />

        <div class="form-group">
            <label for="nombre">Nombre:</label>
            <InputText id="nombre" class="form-control" @bind-Value="editPeriodo.Nombre" />
            <ValidationMessage For="@(() => editPeriodo.Nombre)" />
        </div>

        <div class="form-group">
            <label for="fechaInicio">Fecha Inicio:</label>
            <InputDate id="fechaInicio" class="form-control" @bind-Value="editPeriodo.FechaInicio" />
            <ValidationMessage For="@(() => editPeriodo.FechaInicio)" />
        </div>

        <div class="form-group">
            <label for="fechaFin">Fecha Fin:</label>
            <InputDate id="fechaFin" class="form-control" @bind-Value="editPeriodo.FechaFin" />
            <ValidationMessage For="@(() => editPeriodo.FechaFin)" />
        </div>

        <div class="form-group">
            <label for="tipoPeriodo">Tipo Periodo:</label>

                    
                <select id="tipoPeriodo" class="form-control" @bind="editPeriodo.TipoPeriodo">

                <option value="0">Calendario A</option>
                <option value="1">Calendario B</option>
            </select>
            <ValidationMessage For="@(() => editPeriodo.TipoPeriodo)" />
        </div>

        <div class="form-group">
            <button type="submit" class="btn btn-primary mr-2">Guardar</button>
            <button type="button" class="btn btn-secondary" @onclick="@CloseEditForm">Cancelar</button>
        </div>
    </EditForm>

}

else
{
    <p><em>No hay periodos academicos registrados</em></p>
}


@code {
    private List<PeriodoAcademico>? periodosAcademicos;
    private bool showEditForm = false;
    private PeriodoAcademico PeriodoAcademicoEdit = new PeriodoAcademico(); // Variable para almacenar la información de la fila que se está editando
    public PeriodoAcademico? editPeriodo;


    protected override async Task OnInitializedAsync()
    {
        periodosAcademicos = await GetPeriodosAcademicos();

    }

    private async Task<List<PeriodoAcademico>> GetPeriodosAcademicos()
    {
        return await periodoAcademicoService.Get();
    }
    

  

    private async Task Delete(int id)
    {
        if(await JSRumtime.InvokeAsync<bool>("confirm", $"¿Estás seguro que quieres eliminar el período académico")){}
            
        await periodoAcademicoService.Delete(id);
            await GetPeriodosAcademicos();
    }
    private void ShowEditForm(PeriodoAcademico periodoAcademico)
    {
        editPeriodo = periodoAcademico;
        showEditForm = true;
    }


    private async Task SaveEditForm()
    {
        await periodoAcademicoService.Update(PeriodoAcademicoEdit); // Envía una solicitud PUT al servidor para actualizar la información del período académico
        showEditForm = false; // Oculta el formulario de edición
        await GetPeriodosAcademicos(); // Actualiza la lista de períodos académicos

    }

    private void CloseEditForm()
    {
        showEditForm = false; // Oculta el formulario de edición
    }
}
